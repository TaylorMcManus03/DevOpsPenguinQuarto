{
  "hash": "cc6417c100c9afc31a0f3f6fe4d2e136",
  "result": {
    "markdown": "---\ntitle: \"Model\"\nformat:\n  html:\n    code-fold: true\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom palmerpenguins import penguins\nfrom pandas import get_dummies\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import preprocessing\nfrom vetiver import VetiverModel\nfrom vetiver import vetiver_pin_write\nimport pins\nimport duckdb\nfrom palmerpenguins import penguins\n```\n:::\n\n\n## Get Data\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndf = penguins.load_penguins().dropna()\n\ndf.head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  species     island  bill_length_mm  ...  body_mass_g     sex  year\n0  Adelie  Torgersen            39.1  ...       3750.0    male  2007\n1  Adelie  Torgersen            39.5  ...       3800.0  female  2007\n2  Adelie  Torgersen            40.3  ...       3250.0  female  2007\n\n[3 rows x 8 columns]\n```\n:::\n:::\n\n\n## Define Linear Model and Fit\n\n\n::: {.cell}\n\n```{.python .cell-code}\nX = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)\ny = df['body_mass_g']\n\nmodel = LinearRegression().fit(X, y)\n```\n:::\n\n\n## Get some information\n\n\n::: {.cell}\n\n```{.python .cell-code}\nprint(f\"R^2 {model.score(X,y)}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR^2 0.8555368759537614\n```\n:::\n\n```{.python .cell-code}\nprint(f\"Intercept {model.intercept_}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIntercept 2169.269720939398\n```\n:::\n\n```{.python .cell-code}\nprint(f\"Columns {X.columns}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nColumns Index(['bill_length_mm', 'species_Chinstrap', 'species_Gentoo', 'sex_male'], dtype='object')\n```\n:::\n\n```{.python .cell-code}\nprint(f\"Coefficients {model.coef_}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoefficients [  32.53688677 -298.76553447 1094.86739145  547.36692408]\n```\n:::\n:::\n\n\n## Using Cross-Validation to Judge Model Performance\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#prep code\nset.seed(1234)\ndf <- palmerpenguins::penguins\ndf<-na.omit(df)\n\nPenguins_folds <- vfold_cv(df, v = 5)\nlm_spec <- linear_reg() %>%   \n  set_mode(\"regression\") %>%   \n  set_engine(\"lm\")\n\n\n#cross-validating\nlm_spec %>%   \n  fit_resamples(body_mass_g ~ bill_length_mm+as.factor(species)+as.factor(sex), resamples = Penguins_folds, \n                metrics = metric_set(rmse, rsq)) %>%   \n  collect_metrics()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 Ã— 6\n  .metric .estimator    mean     n std_err .config             \n  <chr>   <chr>        <dbl> <int>   <dbl> <chr>               \n1 rmse    standard   310.        5 5.36    Preprocessor1_Model1\n2 rsq     standard     0.854     5 0.00902 Preprocessor1_Model1\n```\n:::\n:::\n\n\n## **Turning Model into a Vetiver**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nv = VetiverModel(model, model_name='penguin_model', prototype_data=X)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nModel Cards provide a framework for transparent, responsible reporting. \n Use the vetiver `.qmd` Quarto template as a place to start, \n with vetiver.model_card()\nWriting pin:\nName: 'penguin_model'\nVersion: 20240424T111342Z-a6f9b\n```\n:::\n:::\n\n````{=html}\n<!--\n::: {.cell}\n\n```{.python .cell-code}\n# con = duckdb.connect('my-db.duckdb')\n# df = penguins.load_penguins()\n# con.execute('CREATE TABLE penguins AS SELECT * FROM df')\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n#con.close()\n```\n:::\n\n-->\n````\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
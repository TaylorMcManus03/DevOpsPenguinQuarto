---
title: "Model"
format:
  html:
    code-fold: true
---

```{r, echo=FALSE}
#| message: false 
#| warning: false

# Adding a comment just to make a change 
library(reticulate)
library(rsample)
library(yardstick)
library(tidyverse)
library(parsnip)
library(tidymodels)
```

```{python}
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel
from vetiver import vetiver_pin_write
import pins
import duckdb
from palmerpenguins import penguins
```

## Get Data

```{python}
df = penguins.load_penguins().dropna()

df.head(3)
```

## Define Linear Model and Fit

```{python}
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']

model = LinearRegression().fit(X, y)
```

## Get some information

```{python}
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
```

## Using Cross-Validation to Judge Model Performance

```{r}
#prep code
set.seed(1234)
df <- palmerpenguins::penguins
df<-na.omit(df)

Penguins_folds <- vfold_cv(df, v = 5)
lm_spec <- linear_reg() %>%   
  set_mode("regression") %>%   
  set_engine("lm")


#cross-validating
lm_spec %>%   
  fit_resamples(body_mass_g ~ bill_length_mm+as.factor(species)+as.factor(sex), resamples = Penguins_folds, 
                metrics = metric_set(rmse, rsq)) %>%   
  collect_metrics()
```

## **Turning Model into a Vetiver**

```{python}
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
```

```{python, echo=FALSE}
b = pins.board_folder('data/model', allow_pickle_read=True)
vetiver_pin_write(b,v)
v = VetiverModel.from_pin(b, 'penguin_model')
```

````{=html}
<!--
```{python}
# con = duckdb.connect('my-db.duckdb')
# df = penguins.load_penguins()
# con.execute('CREATE TABLE penguins AS SELECT * FROM df')
```

```{python}
#con.close()
```
-->
````
